<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pages on YoseobDoc</title>
    <link>https://yoseobdoc.github.io/page/</link>
    <description>Recent content in Pages on YoseobDoc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yoseobdoc.github.io/page/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Course overview &#43; the shell</title>
      <link>https://yoseobdoc.github.io/page/course-shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/course-shell/</guid>
      <description>Motivation As computer scientists, we know that computers are great at aiding in repetitive tasks. However, far too often, we forget that this applies just as much to our use of the computer as it does to the computations we want our programs to perform. We have a vast range of tools available at our fingertips that enable us to be more productive and solve more complex problems when working on any computer-related problem.</description>
    </item>
    
    <item>
      <title>Shell Tools and Scripting</title>
      <link>https://yoseobdoc.github.io/page/shell-tools/</link>
      <pubDate>Mon, 14 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/shell-tools/</guid>
      <description>In this lecture, we will present some of the basics of using bash as a scripting language along with a number of shell tools that cover several of the most common tasks that you will be constantly performing in the command line.
Shell Scripting So far we have seen how to execute commands in the shell and pipe them together. However, in many scenarios you will want to perform a series of commands and make use of control flow expressions like conditionals or loops.</description>
    </item>
    
    <item>
      <title>Editors (Vim)</title>
      <link>https://yoseobdoc.github.io/page/editors/</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/editors/</guid>
      <description>Writing English words and writing code are very different activities. When programming, you spend more time switching files, reading, navigating, and editing code compared to writing a long stream. It makes sense that there are different types of programs for writing English words versus code (e.g. Microsoft Word versus Visual Studio Code).
As programmers, we spend most of our time editing code, so it&amp;rsquo;s worth investing time mastering an editor that fits your needs.</description>
    </item>
    
    <item>
      <title>Data Wrangling</title>
      <link>https://yoseobdoc.github.io/page/data-wrangling/</link>
      <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/data-wrangling/</guid>
      <description>Have you ever wanted to take data in one format and turn it into a different format? Of course you have! That, in very general terms, is what this lecture is all about. Specifically, massaging data, whether in text or binary format, until you end up with exactly what you wanted.
We&amp;rsquo;ve already seen some basic data wrangling in past lectures. Pretty much any time you use the | operator, you are performing some kind of data wrangling.</description>
    </item>
    
    <item>
      <title>Command-line Environment</title>
      <link>https://yoseobdoc.github.io/page/command-line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/command-line/</guid>
      <description>In this lecture we will go through several ways in which you can improve your workflow when using the shell. We have been working with the shell for a while now, but we have mainly focused on executing different commands. We will now see how to run several processes at the same time while keeping track of them, how to stop or pause a specific process and how to make a process run in the background.</description>
    </item>
    
    <item>
      <title>Version Control (Git)</title>
      <link>https://yoseobdoc.github.io/page/version-control/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/version-control/</guid>
      <description>Version control systems (VCSs) are tools used to track changes to source code (or other collections of files and folders). As the name implies, these tools help maintain a history of changes; furthermore, they facilitate collaboration. VCSs track changes to a folder and its contents in a series of snapshots, where each snapshot encapsulates the entire state of files/folders within a top-level directory. VCSs also maintain metadata like who created each snapshot, messages associated with each snapshot, and so on.</description>
    </item>
    
    <item>
      <title>Debugging and Profiling</title>
      <link>https://yoseobdoc.github.io/page/debugging-profiling/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/debugging-profiling/</guid>
      <description>A golden rule in programming is that code does not do what you expect it to do, but what you tell it to do. Bridging that gap can sometimes be a quite difficult feat. In this lecture we are going to cover useful techniques for dealing with buggy and resource hungry code: debugging and profiling.
Debugging Printf debugging and Logging &amp;ldquo;The most effective debugging tool is still careful thought, coupled with judiciously placed print statements&amp;rdquo; â€” Brian Kernighan, Unix for Beginners.</description>
    </item>
    
    <item>
      <title>Metaprogramming</title>
      <link>https://yoseobdoc.github.io/page/metaprogramming/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/metaprogramming/</guid>
      <description>What do we mean by &amp;ldquo;metaprogramming&amp;rdquo;? Well, it was the best collective term we could come up with for the set of things that are more about process than they are about writing code or working more efficiently. In this lecture, we will look at systems for building and testing your code, and for managing dependencies. These may seem like they are of limited importance in your day-to-day as a student, but the moment you interact with a larger code base through an internship or once you enter the &amp;ldquo;real world&amp;rdquo;, you will see this everywhere.</description>
    </item>
    
    <item>
      <title>Security and Cryptography</title>
      <link>https://yoseobdoc.github.io/page/security/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/security/</guid>
      <description>Last year&amp;rsquo;s security and privacy lecture focused on how you can be more secure as a computer user. This year, we will focus on security and cryptography concepts that are relevant in understanding tools covered earlier in this class, such as the use of hash functions in Git or key derivation functions and symmetric/asymmetric cryptosystems in SSH.
This lecture is not a substitute for a more rigorous and complete course on computer systems security (6.</description>
    </item>
    
    <item>
      <title>Potpourri</title>
      <link>https://yoseobdoc.github.io/page/potpourri/</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/potpourri/</guid>
      <description>Table of Contents  Table of Contents Keyboard remapping Daemons FUSE Backups APIs Common command-line flags/patterns Window managers VPNs Markdown Hammerspoon (desktop automation on macOS)  Resources   Booting + Live USBs Docker, Vagrant, VMs, Cloud, OpenStack Notebook programming GitHub  Keyboard remapping As a programmer, your keyboard is your main input method. As with pretty much anything in your computer, it is configurable (and worth configuring).</description>
    </item>
    
    <item>
      <title>Q&amp;A</title>
      <link>https://yoseobdoc.github.io/page/qa/</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yoseobdoc.github.io/page/qa/</guid>
      <description>For the last lecture, we answered questions that the students submitted:
 Any recommendations on learning Operating Systems related topics like processes, virtual memory, interrupts, memory management, etc What are some of the tools you&amp;rsquo;d prioritize learning first? When do I use Python versus a Bash scripts versus some other language? What is the difference between source script.sh and ./script.sh What are the places where various packages and tools are stored and how does referencing them work?</description>
    </item>
    
  </channel>
</rss>